
[[third-party-api-integration]]
== 第三方API整合

[[non-shipped-annotations]]
=== Non-shipped注解

为了让MapStruct能使用正确的代码段，很多时候您都必须解决歧义问题。
然而，MapStruct的主要目标是完成bean映射的同时不污染entity的代码。
因此，MapStruct足够灵活，能和三方库中已经定义的注解进行交互。
为了满足该要求，只要注解的 _名称_ 匹配即可。因此，注解可以来自 _任何包_ 。

在前文中，我们使用了 _名为_ `@ConstructorProperties` 和 `@Default` 的注解，就是此处的例子。

[WARNING]
====
如果存在这样命名的三方注解，不保证其 `@Target` 与预期的位置匹配。请注意，不建议仅仅为了映射而采用第三方注解，因为它可能会导致该库产生不必要的副作用。
====

一个非常常见的场景是，导入到项目中的第三方依赖项没有提供这样的注解，或者不适合使用。
在这种情况下，可以创建自己的注解，例如:

====
[source, java, linenums]
[subs="verbatim,attributes"]
----
package foo.support.mapstruct;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target(ElementType.CONSTRUCTOR)
@Retention(RetentionPolicy.CLASS)
public @interface Default {

}
----
====

[[lombok]]
=== Lombok

MapStruct能够和 https://projectlombok.org/[Lombok] 一起使用，比如MapStruct 1.2.0.Beta1 和 Lombok 1.16.14。

MapStruct会利用生成的getters, setters, 和constructors，并且用它们来生成mapper实现。

[NOTE]
====
Lombok 1.18.16有一个破坏式改新（https://projectlombok.org/changelog[changelog]）。
为了让Lombok和MapStruct一起工作，您必须添加一个额外的注解处理器 `lombok-mapstruct-binding` (https://mvnrepository.com/artifact/org.projectlombok/lombok-mapstruct-binding[Maven])。
该注解处理器解决了Lombok模块和MapStruct模块的编译问题。

[source, xml]
----
<path>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok-mapstruct-binding</artifactId>
    <version>0.2.0</version>
</path>
----
====

==== 设置

此处使用的MapStruct的Gradle/Maven设置和 <<setup>> 中的设置一致，您需要额外添加的是Lombok的依赖。

.Maven configuration
====
[source, xml, linenums]
[subs="verbatim,attributes"]
----

<properties>
    <org.mapstruct.version>{mapstructVersion}</org.mapstruct.version>
    <org.projectlombok.version>1.18.16</org.projectlombok.version>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
</properties>

<dependencies>
    <dependency>
        <groupId>org.mapstruct</groupId>
        <artifactId>mapstruct</artifactId>
        <version>${org.mapstruct.version}</version>
    </dependency>

    <!-- lombok dependency should not end up on classpath -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>${org.projectlombok.version}</version>
        <scope>provided</scope>
    </dependency>
</dependencies>

<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.1</version>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
                <annotationProcessorPaths>
                    <path>
                        <groupId>org.mapstruct</groupId>
                        <artifactId>mapstruct-processor</artifactId>
                        <version>${org.mapstruct.version}</version>
                    </path>
                    <path>
                        <groupId>org.projectlombok</groupId>
                        <artifactId>lombok</artifactId>
                        <version>${org.projectlombok.version}</version>
                    </path>

                    <!-- additional annotation processor required as of Lombok 1.18.16 -->
                    <path>
                        <groupId>org.projectlombok</groupId>
                        <artifactId>lombok-mapstruct-binding</artifactId>
                        <version>0.2.0</version>
                    </path>
                </annotationProcessorPaths>
            </configuration>
        </plugin>
    </plugins>
</build>
----
====

.Gradle configuration (3.4 and later)
====
[source, groovy, linenums]
[subs="verbatim,attributes"]
----

dependencies {

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    compileOnly "org.projectlombok:lombok:1.18.16"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok:1.18.16"
}

----
====

之后，您就可以同时使用Lombok和 <<defining-mapper>> 了。

.Usage of MapStruct with Lombok
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
@Data
public class Source {

    private String test;
}

public class Target {

    private Long testing;

    public Long getTesting() {
        return testing;
    }

    public void setTesting( Long testing ) {
        this.testing = testing;
    }
}

@Mapper
public interface SourceTargetMapper {

    SourceTargetMapper MAPPER = Mappers.getMapper( SourceTargetMapper.class );

    @Mapping( source = "test", target = "testing" )
    Target toTarget( Source s );
}

----
====

您可以在Github上找到一个样例工程 https://github.com/mapstruct/mapstruct-examples/tree/master/mapstruct-lombok[mapstruct-lombok]。