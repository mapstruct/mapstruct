[[object-factories]]
== 对象工厂

默认情况下，在MapStruct生成的映射代码中，代码会调用默认的构造器来初始化target类型的实例。

作为扩展，您可以使用自定义的对象工厂，以此来获得target类型的实例。一个实例是JAXB，其创建了 `ObjectFactory` 来获得schema类型的新实例。

如需要用，请按照 <<invoking-other-mappers>> 的描述，通过 `@Mapper#uses()` 注册自定义工厂，或者直接在您的mapper中实现自定义工厂。

当在bean映射中创建target对象时，MapStruct会寻找一个返回需要target类型的方法，选择范围是无参方法、有 `@ObjectFactory` 的方法和带 `@TargetType` 的单参方法。如果找到了，那么接下来MapStruct会调用该方法替代默认构造器。

.Custom object factories
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
public class DtoFactory {

     public CarDto createCarDto() {
         return // ... custom factory logic
     }
}
----
[source, java, linenums]
[subs="verbatim,attributes"]
----
public class EntityFactory {

     public <T extends BaseEntity> T createEntity(@TargetType Class<T> entityClass) {
         return // ... custom factory logic
     }
}
----
[source, java, linenums]
[subs="verbatim,attributes"]
----
@Mapper(uses= { DtoFactory.class, EntityFactory.class } )
public interface CarMapper {

    CarMapper INSTANCE = Mappers.getMapper( CarMapper.class );

    CarDto carToCarDto(Car car);

    Car carDtoToCar(CarDto carDto);
}
----
[source, java, linenums]
[subs="verbatim,attributes"]
----
//GENERATED CODE
public class CarMapperImpl implements CarMapper {

    private final DtoFactory dtoFactory = new DtoFactory();

    private final EntityFactory entityFactory = new EntityFactory();

    @Override
    public CarDto carToCarDto(Car car) {
        if ( car == null ) {
            return null;
        }

        CarDto carDto = dtoFactory.createCarDto();

        //map properties...

        return carDto;
    }

    @Override
    public Car carDtoToCar(CarDto carDto) {
        if ( carDto == null ) {
            return null;
        }

        Car car = entityFactory.createEntity( Car.class );

        //map properties...

        return car;
    }
}
----
====

.具有更新方法的自定义工厂
====
[source, java, linenums]
[subs="verbatim,attributes"]
----
@Mapper(uses = { DtoFactory.class, EntityFactory.class, CarMapper.class } )
public interface OwnerMapper {

    OwnerMapper INSTANCE = Mappers.getMapper( OwnerMapper.class );

    void updateOwnerDto(Owner owner, @MappingTarget OwnerDto ownerDto);

    void updateOwner(OwnerDto ownerDto, @MappingTarget Owner owner);
}
----
[source, java, linenums]
[subs="verbatim,attributes"]
----
//GENERATED CODE
public class OwnerMapperImpl implements OwnerMapper {

    private final DtoFactory dtoFactory = new DtoFactory();

    private final EntityFactory entityFactory = new EntityFactory();

    private final OwnerMapper ownerMapper = Mappers.getMapper( OwnerMapper.class );

    @Override
    public void updateOwnerDto(Owner owner, @MappingTarget OwnerDto ownerDto) {
        if ( owner == null ) {
            return;
        }

        if ( owner.getCar() != null ) {
            if ( ownerDto.getCar() == null ) {
                ownerDto.setCar( dtoFactory.createCarDto() );
            }
            // update car within ownerDto
        }
        else {
            ownerDto.setCar( null );
        }

       // updating other properties
    }

    @Override
    public void updateOwner(OwnerDto ownerDto, @MappingTarget Owner owner) {
        if ( ownerDto == null ) {
            return;
        }

        if ( ownerDto.getCar() != null ) {
            if ( owner.getCar() == null ) {
                owner.setCar( entityFactory.createEntity( Car.class ) );
            }
            // update car within owner
        }
        else {
            owner.setCar( null );
        }

       // updating other properties
    }
}
----
====

另外，在工厂方法上加 `@ObjectFactory` 可以让您访问控制source对象。

source对象可以添加到参数里，和映射方法中一样。

为了让MapStruct知道指定的方法是唯一的工厂方法，`@ObjectFactory` 是必须的。

.Custom object factories with `@ObjectFactory`

====
[source, java, linenums]
[subs="verbatim,attributes"]
----
public class DtoFactory {

     @ObjectFactory
     public CarDto createCarDto(Car car) {
         return // ... custom factory logic
     }
}
----
====